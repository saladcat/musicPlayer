//---------------------------------------------------------------------------


#pragma hdrstop

#include "LrcHelper.h"
#include "musicHelper.h"
#include "LrcWin.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
vector<AnsiString> sepString(AnsiString str) {
    vector<AnsiString> res;
    int lPos = 1, rPos = 1, midPos = 1;
    while (str[lPos] != '[') {
        lPos++;
    }
    while (str[midPos] != ':') {
        midPos++;
    }
    while (str[rPos] != ']') {
        rPos++;
    }
    res.push_back(str.SubString(lPos + 1, midPos - lPos));
    res.push_back(str.SubString(midPos + 1, rPos - midPos));
    res.push_back(str.SubString(rPos + 1, str.Length() - rPos));
    return res;
}
LrcHelper::~LrcHelper(){
    lastTimer->Enabled=false;
}
LrcHelper::LrcHelper(AnsiString pathName) {
    index=0;
    ifstream is(pathName.c_str());
    if (!is){
        isFileExist=false;
        return;
    }
    AnsiString line;
    string tem;
    while (getline(is, tem)) {
        line = str2Ansi(tem);
        vector<AnsiString> sepStr = sepString(line);
        if (sepStr[0] == "ti") {

        } else if (sepStr[0] == "ar") {

        } else if (sepStr[0] == "al") {

        } else if (sepStr[0] == "by") {

        } else if (sepStr[0] == "offset") {

        } else {
            double min = 0;
            double sec = 0;
            AnsiString text;
            min = atof(sepStr[0].c_str());
            sec = atof(sepStr[1].c_str());
            double total = min * 60 + sec;
            text = sepStr[2];
            word *ptr = new word;
            ptr->text = text;
            ptr->time = total;
            lrc.push_back(*ptr);
        }
    }
}

void LrcHelper::prtLrc(TTimer* timer) {
    lastTimer= timer;
    Form3->lrcList->Lines->Clear();
    setBeginTime();
    if (isFileExist){
        timer->Enabled = true;
    }else{
        Form3->lrcList->Lines->Add("there is no .LRC file");
    }
}
void LrcHelper::setBeginTime(void){
    double nowTime = clock() * 1.0 / CLOCKS_PER_SEC;
    beginTime = nowTime;
}
